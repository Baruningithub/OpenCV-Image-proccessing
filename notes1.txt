imread , 
imshow(),
waitKey(0),

# convert
cvtColor(img,cv2.COLOR_BGR2GRAY) ,

# rgb assign
img[:,:,0]=0 , # blue =0
imgBlue = img_re[:,:,0] ,

#copy image
img_copy = img.copy()  


#stacking multiple images
np.hstack((im1,im2,im3))

#GEOMETRIC TRANSFORMATIONS
###

# scaling (resizing)
    img_re = cv2.resize(img,(256,256))
    img_50 = cv2.resize(img,(img.shape[1]//2,img.shape[0]//2))

# Scaling with interpolation (digital zooming)
    res = cv.resize(img,None,fx=2, fy=2, interpolation = cv.INTER_LINEAR)
    res = cv.resize(img,None,fx=2, fy=2, interpolation = cv.INTER_CUBIC)

# image translations 
    matrix = np.float32([[1,0,100],[0,1,100]])
    translated = cv2.warpAffine(img, matrix, dsize=(img.shape[1]+100,img.shape[0]+100))

# image rotation
    mat = cv2.getRotationMatrix2D(center=(width//2,height//2),angle=15,scale=1)
    img_r = cv2.warpAffine(img, mat, (width,height))

# image shearing 
##
    With shear_factor

        shear_factor = 0.1 
        rows, cols = image.shape[:2]
        M = np.float32([[1, shear_factor, 0],  [0, 1, 0]])
        sheared_image = cv2.warpAffine(image, M, (cols, rows))


    With 3 source and desination points

        rows, cols = image.shape[:2]
        src_pts = np.float32([[0, 0], [cols - 1, 0], [0, rows - 1]])
        dst_pts = np.float32([[0, 0], [int(0.8 * (cols - 1)), 0], [int(0.4 * (cols - 1)), rows - 1]])
        M = cv2.getAffineTransform(src_pts, dst_pts)
        sheared_image = cv2.warpAffine(image, M, (image.shape[1], image.shape[0]))
##

# perspective transform (3D, result looks like trapezium or quadrilateral)
##

        src_pts = np.float32([[0, 0], [cols - 1, 0], [0, rows - 1],[cols-1,rows-1]])
        dst_pts = np.float32([[0, 0], [cols-1,0], [int(0.33*cols),rows-1], [int(0.8*cols),rows-1]])
        M = cv2.getPerspectiveTransform(src_pts, dst_pts)
        projected_image = cv2.warpPerspective(image, M, (300, 300)) 

##

###

# Image Blurring

    blur = cv2.blur(image, (5, 5))

    box_filtered = cv2.boxFilter(image, -1, (5, 5))

    gaussian_blur = cv2.GaussianBlur(image, (7, 7), 0)

    bilateral_filtered = cv2.bilateralFilter(image, 9, 75, 75)

    median_blur = cv2.medianBlur(image, 9)

# Edge Detection

    image = cv2.imread('img/m2.jpg',cv2.IMREAD_GRAYSCALE)
    # Apply Sobel operator for first derivative in x direction
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)

    # Apply Sobel operator for first derivative in y direction
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)

    # Apply Scharr operator for first derivative in x direction
    scharr_x = cv2.Scharr(image, cv2.CV_64F, 1, 0)

    # Apply Scharr operator for first derivative in y direction
    scharr_y = cv2.Scharr(image, cv2.CV_64F, 0, 1)

    # Apply Laplacian operator (2nd derivative operation on the image)
    laplacian = cv2.Laplacian(image, cv2.CV_64F)

#Bitwise operations

    bitwise_and = cv2.bitwise_and(img1, img2)

    bitwise_or = cv2.bitwise_or(img1, img2)

    bitwise_xor = cv2.bitwise_xor(img1, img2)

    bitwise_not = cv2.bitwise_not(img1)

    masked_image = cv2.bitwise_and(img1, img1, mask=mask)


# flip
im_flip_v= cv2.flip(img , 0)
im_flip_h= cv2.flip(img , 1)
im_flip_m= cv2.flip(img , -1)

# crop
img_crop = img[100:400,50:600] # [height_slice,width_slice]

# save/write images
cv2.imwrite("img/m1_crop.png",img_crop)

# SHAPES AND TEXT
# rectangle
cv2.rectangle(img,pt1=(100,100),pt2=(400,400),color=(0,255,0),thickness=-1)

#circle 
cv2.circle(img,center=(100,100),radius=50,color=(255,255,0),thickness=5)

# line 
cv2.line(img,pt1=(0,0),pt2=(720,720),color=(0,0,255),thickness=4)

#text 
cv2.putText(img,org=(400,400),text="HEllo",fontScale=4,color=(255,25,0),thickness=2,
            lineType=cv2.LINE_AA,fontFace=cv2.FONT_HERSHEY_COMPLEX_SMALL)



